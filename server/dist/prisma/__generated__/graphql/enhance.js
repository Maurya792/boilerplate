"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib = __importStar(require("tslib"));
const crudResolvers = __importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = __importStar(require("./resolvers/crud/args.index"));
const actionResolvers = __importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = __importStar(require("./resolvers/relations/resolvers.index"));
const models = __importStar(require("./models"));
const outputTypes = __importStar(require("./resolvers/outputs"));
const inputTypes = __importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Asset: crudResolvers.AssetCrudResolver,
    Log: crudResolvers.LogCrudResolver,
    Part: crudResolvers.PartCrudResolver,
    Trace: crudResolvers.TraceCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Organization: crudResolvers.OrganizationCrudResolver,
    User_organization: crudResolvers.User_organizationCrudResolver,
    Team: crudResolvers.TeamCrudResolver,
    User_organization_team: crudResolvers.User_organization_teamCrudResolver,
};
const actionResolversMap = {
    Asset: {
        aggregateAsset: actionResolvers.AggregateAssetResolver,
        createManyAsset: actionResolvers.CreateManyAssetResolver,
        createOneAsset: actionResolvers.CreateOneAssetResolver,
        deleteManyAsset: actionResolvers.DeleteManyAssetResolver,
        deleteOneAsset: actionResolvers.DeleteOneAssetResolver,
        findFirstAsset: actionResolvers.FindFirstAssetResolver,
        findFirstAssetOrThrow: actionResolvers.FindFirstAssetOrThrowResolver,
        assets: actionResolvers.FindManyAssetResolver,
        asset: actionResolvers.FindUniqueAssetResolver,
        getAsset: actionResolvers.FindUniqueAssetOrThrowResolver,
        groupByAsset: actionResolvers.GroupByAssetResolver,
        updateManyAsset: actionResolvers.UpdateManyAssetResolver,
        updateOneAsset: actionResolvers.UpdateOneAssetResolver,
        upsertOneAsset: actionResolvers.UpsertOneAssetResolver,
    },
    Log: {
        aggregateLog: actionResolvers.AggregateLogResolver,
        createManyLog: actionResolvers.CreateManyLogResolver,
        createOneLog: actionResolvers.CreateOneLogResolver,
        deleteManyLog: actionResolvers.DeleteManyLogResolver,
        deleteOneLog: actionResolvers.DeleteOneLogResolver,
        findFirstLog: actionResolvers.FindFirstLogResolver,
        findFirstLogOrThrow: actionResolvers.FindFirstLogOrThrowResolver,
        logs: actionResolvers.FindManyLogResolver,
        log: actionResolvers.FindUniqueLogResolver,
        getLog: actionResolvers.FindUniqueLogOrThrowResolver,
        groupByLog: actionResolvers.GroupByLogResolver,
        updateManyLog: actionResolvers.UpdateManyLogResolver,
        updateOneLog: actionResolvers.UpdateOneLogResolver,
        upsertOneLog: actionResolvers.UpsertOneLogResolver,
    },
    Part: {
        aggregatePart: actionResolvers.AggregatePartResolver,
        createManyPart: actionResolvers.CreateManyPartResolver,
        createOnePart: actionResolvers.CreateOnePartResolver,
        deleteManyPart: actionResolvers.DeleteManyPartResolver,
        deleteOnePart: actionResolvers.DeleteOnePartResolver,
        findFirstPart: actionResolvers.FindFirstPartResolver,
        findFirstPartOrThrow: actionResolvers.FindFirstPartOrThrowResolver,
        parts: actionResolvers.FindManyPartResolver,
        part: actionResolvers.FindUniquePartResolver,
        getPart: actionResolvers.FindUniquePartOrThrowResolver,
        groupByPart: actionResolvers.GroupByPartResolver,
        updateManyPart: actionResolvers.UpdateManyPartResolver,
        updateOnePart: actionResolvers.UpdateOnePartResolver,
        upsertOnePart: actionResolvers.UpsertOnePartResolver,
    },
    Trace: {
        aggregateTrace: actionResolvers.AggregateTraceResolver,
        createManyTrace: actionResolvers.CreateManyTraceResolver,
        createOneTrace: actionResolvers.CreateOneTraceResolver,
        deleteManyTrace: actionResolvers.DeleteManyTraceResolver,
        deleteOneTrace: actionResolvers.DeleteOneTraceResolver,
        findFirstTrace: actionResolvers.FindFirstTraceResolver,
        findFirstTraceOrThrow: actionResolvers.FindFirstTraceOrThrowResolver,
        traces: actionResolvers.FindManyTraceResolver,
        trace: actionResolvers.FindUniqueTraceResolver,
        getTrace: actionResolvers.FindUniqueTraceOrThrowResolver,
        groupByTrace: actionResolvers.GroupByTraceResolver,
        updateManyTrace: actionResolvers.UpdateManyTraceResolver,
        updateOneTrace: actionResolvers.UpdateOneTraceResolver,
        upsertOneTrace: actionResolvers.UpsertOneTraceResolver,
    },
    User: {
        aggregateUser: actionResolvers.AggregateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        createOneUser: actionResolvers.CreateOneUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        deleteOneUser: actionResolvers.DeleteOneUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
        users: actionResolvers.FindManyUserResolver,
        user: actionResolvers.FindUniqueUserResolver,
        getUser: actionResolvers.FindUniqueUserOrThrowResolver,
        groupByUser: actionResolvers.GroupByUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        updateOneUser: actionResolvers.UpdateOneUserResolver,
        upsertOneUser: actionResolvers.UpsertOneUserResolver,
    },
    Organization: {
        aggregateOrganization: actionResolvers.AggregateOrganizationResolver,
        createManyOrganization: actionResolvers.CreateManyOrganizationResolver,
        createOneOrganization: actionResolvers.CreateOneOrganizationResolver,
        deleteManyOrganization: actionResolvers.DeleteManyOrganizationResolver,
        deleteOneOrganization: actionResolvers.DeleteOneOrganizationResolver,
        findFirstOrganization: actionResolvers.FindFirstOrganizationResolver,
        findFirstOrganizationOrThrow: actionResolvers.FindFirstOrganizationOrThrowResolver,
        organizations: actionResolvers.FindManyOrganizationResolver,
        organization: actionResolvers.FindUniqueOrganizationResolver,
        getOrganization: actionResolvers.FindUniqueOrganizationOrThrowResolver,
        groupByOrganization: actionResolvers.GroupByOrganizationResolver,
        updateManyOrganization: actionResolvers.UpdateManyOrganizationResolver,
        updateOneOrganization: actionResolvers.UpdateOneOrganizationResolver,
        upsertOneOrganization: actionResolvers.UpsertOneOrganizationResolver,
    },
    User_organization: {
        aggregateUser_organization: actionResolvers.AggregateUser_organizationResolver,
        createManyUser_organization: actionResolvers.CreateManyUser_organizationResolver,
        createOneUser_organization: actionResolvers.CreateOneUser_organizationResolver,
        deleteManyUser_organization: actionResolvers.DeleteManyUser_organizationResolver,
        deleteOneUser_organization: actionResolvers.DeleteOneUser_organizationResolver,
        findFirstUser_organization: actionResolvers.FindFirstUser_organizationResolver,
        findFirstUser_organizationOrThrow: actionResolvers.FindFirstUser_organizationOrThrowResolver,
        user_organizations: actionResolvers.FindManyUser_organizationResolver,
        user_organization: actionResolvers.FindUniqueUser_organizationResolver,
        getUser_organization: actionResolvers.FindUniqueUser_organizationOrThrowResolver,
        groupByUser_organization: actionResolvers.GroupByUser_organizationResolver,
        updateManyUser_organization: actionResolvers.UpdateManyUser_organizationResolver,
        updateOneUser_organization: actionResolvers.UpdateOneUser_organizationResolver,
        upsertOneUser_organization: actionResolvers.UpsertOneUser_organizationResolver,
    },
    Team: {
        aggregateTeam: actionResolvers.AggregateTeamResolver,
        createManyTeam: actionResolvers.CreateManyTeamResolver,
        createOneTeam: actionResolvers.CreateOneTeamResolver,
        deleteManyTeam: actionResolvers.DeleteManyTeamResolver,
        deleteOneTeam: actionResolvers.DeleteOneTeamResolver,
        findFirstTeam: actionResolvers.FindFirstTeamResolver,
        findFirstTeamOrThrow: actionResolvers.FindFirstTeamOrThrowResolver,
        teams: actionResolvers.FindManyTeamResolver,
        team: actionResolvers.FindUniqueTeamResolver,
        getTeam: actionResolvers.FindUniqueTeamOrThrowResolver,
        groupByTeam: actionResolvers.GroupByTeamResolver,
        updateManyTeam: actionResolvers.UpdateManyTeamResolver,
        updateOneTeam: actionResolvers.UpdateOneTeamResolver,
        upsertOneTeam: actionResolvers.UpsertOneTeamResolver,
    },
    User_organization_team: {
        aggregateUser_organization_team: actionResolvers.AggregateUser_organization_teamResolver,
        createManyUser_organization_team: actionResolvers.CreateManyUser_organization_teamResolver,
        createOneUser_organization_team: actionResolvers.CreateOneUser_organization_teamResolver,
        deleteManyUser_organization_team: actionResolvers.DeleteManyUser_organization_teamResolver,
        deleteOneUser_organization_team: actionResolvers.DeleteOneUser_organization_teamResolver,
        findFirstUser_organization_team: actionResolvers.FindFirstUser_organization_teamResolver,
        findFirstUser_organization_teamOrThrow: actionResolvers.FindFirstUser_organization_teamOrThrowResolver,
        user_organization_teams: actionResolvers.FindManyUser_organization_teamResolver,
        user_organization_team: actionResolvers.FindUniqueUser_organization_teamResolver,
        getUser_organization_team: actionResolvers.FindUniqueUser_organization_teamOrThrowResolver,
        groupByUser_organization_team: actionResolvers.GroupByUser_organization_teamResolver,
        updateManyUser_organization_team: actionResolvers.UpdateManyUser_organization_teamResolver,
        updateOneUser_organization_team: actionResolvers.UpdateOneUser_organization_teamResolver,
        upsertOneUser_organization_team: actionResolvers.UpsertOneUser_organization_teamResolver,
    },
};
const crudResolversInfo = {
    Asset: [
        "aggregateAsset",
        "createManyAsset",
        "createOneAsset",
        "deleteManyAsset",
        "deleteOneAsset",
        "findFirstAsset",
        "findFirstAssetOrThrow",
        "assets",
        "asset",
        "getAsset",
        "groupByAsset",
        "updateManyAsset",
        "updateOneAsset",
        "upsertOneAsset",
    ],
    Log: [
        "aggregateLog",
        "createManyLog",
        "createOneLog",
        "deleteManyLog",
        "deleteOneLog",
        "findFirstLog",
        "findFirstLogOrThrow",
        "logs",
        "log",
        "getLog",
        "groupByLog",
        "updateManyLog",
        "updateOneLog",
        "upsertOneLog",
    ],
    Part: [
        "aggregatePart",
        "createManyPart",
        "createOnePart",
        "deleteManyPart",
        "deleteOnePart",
        "findFirstPart",
        "findFirstPartOrThrow",
        "parts",
        "part",
        "getPart",
        "groupByPart",
        "updateManyPart",
        "updateOnePart",
        "upsertOnePart",
    ],
    Trace: [
        "aggregateTrace",
        "createManyTrace",
        "createOneTrace",
        "deleteManyTrace",
        "deleteOneTrace",
        "findFirstTrace",
        "findFirstTraceOrThrow",
        "traces",
        "trace",
        "getTrace",
        "groupByTrace",
        "updateManyTrace",
        "updateOneTrace",
        "upsertOneTrace",
    ],
    User: [
        "aggregateUser",
        "createManyUser",
        "createOneUser",
        "deleteManyUser",
        "deleteOneUser",
        "findFirstUser",
        "findFirstUserOrThrow",
        "users",
        "user",
        "getUser",
        "groupByUser",
        "updateManyUser",
        "updateOneUser",
        "upsertOneUser",
    ],
    Organization: [
        "aggregateOrganization",
        "createManyOrganization",
        "createOneOrganization",
        "deleteManyOrganization",
        "deleteOneOrganization",
        "findFirstOrganization",
        "findFirstOrganizationOrThrow",
        "organizations",
        "organization",
        "getOrganization",
        "groupByOrganization",
        "updateManyOrganization",
        "updateOneOrganization",
        "upsertOneOrganization",
    ],
    User_organization: [
        "aggregateUser_organization",
        "createManyUser_organization",
        "createOneUser_organization",
        "deleteManyUser_organization",
        "deleteOneUser_organization",
        "findFirstUser_organization",
        "findFirstUser_organizationOrThrow",
        "user_organizations",
        "user_organization",
        "getUser_organization",
        "groupByUser_organization",
        "updateManyUser_organization",
        "updateOneUser_organization",
        "upsertOneUser_organization",
    ],
    Team: [
        "aggregateTeam",
        "createManyTeam",
        "createOneTeam",
        "deleteManyTeam",
        "deleteOneTeam",
        "findFirstTeam",
        "findFirstTeamOrThrow",
        "teams",
        "team",
        "getTeam",
        "groupByTeam",
        "updateManyTeam",
        "updateOneTeam",
        "upsertOneTeam",
    ],
    User_organization_team: [
        "aggregateUser_organization_team",
        "createManyUser_organization_team",
        "createOneUser_organization_team",
        "deleteManyUser_organization_team",
        "deleteOneUser_organization_team",
        "findFirstUser_organization_team",
        "findFirstUser_organization_teamOrThrow",
        "user_organization_teams",
        "user_organization_team",
        "getUser_organization_team",
        "groupByUser_organization_team",
        "updateManyUser_organization_team",
        "updateOneUser_organization_team",
        "upsertOneUser_organization_team",
    ],
};
const argsInfo = {
    AggregateAssetArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyAssetArgs: ["data", "skipDuplicates"],
    CreateOneAssetArgs: ["data"],
    DeleteManyAssetArgs: ["where"],
    DeleteOneAssetArgs: ["where"],
    FindFirstAssetArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindFirstAssetOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyAssetArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueAssetArgs: ["where"],
    FindUniqueAssetOrThrowArgs: ["where"],
    GroupByAssetArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyAssetArgs: ["data", "where"],
    UpdateOneAssetArgs: ["data", "where"],
    UpsertOneAssetArgs: ["where", "create", "update"],
    AggregateLogArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyLogArgs: ["data", "skipDuplicates"],
    CreateOneLogArgs: ["data"],
    DeleteManyLogArgs: ["where"],
    DeleteOneLogArgs: ["where"],
    FindFirstLogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstLogOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyLogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueLogArgs: ["where"],
    FindUniqueLogOrThrowArgs: ["where"],
    GroupByLogArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyLogArgs: ["data", "where"],
    UpdateOneLogArgs: ["data", "where"],
    UpsertOneLogArgs: ["where", "create", "update"],
    AggregatePartArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyPartArgs: ["data", "skipDuplicates"],
    CreateOnePartArgs: ["data"],
    DeleteManyPartArgs: ["where"],
    DeleteOnePartArgs: ["where"],
    FindFirstPartArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstPartOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyPartArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniquePartArgs: ["where"],
    FindUniquePartOrThrowArgs: ["where"],
    GroupByPartArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyPartArgs: ["data", "where"],
    UpdateOnePartArgs: ["data", "where"],
    UpsertOnePartArgs: ["where", "create", "update"],
    AggregateTraceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTraceArgs: ["data", "skipDuplicates"],
    CreateOneTraceArgs: ["data"],
    DeleteManyTraceArgs: ["where"],
    DeleteOneTraceArgs: ["where"],
    FindFirstTraceArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindFirstTraceOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyTraceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTraceArgs: ["where"],
    FindUniqueTraceOrThrowArgs: ["where"],
    GroupByTraceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTraceArgs: ["data", "where"],
    UpdateOneTraceArgs: ["data", "where"],
    UpsertOneTraceArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    CreateOneUserArgs: ["data"],
    DeleteManyUserArgs: ["where"],
    DeleteOneUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstUserOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueUserArgs: ["where"],
    FindUniqueUserOrThrowArgs: ["where"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyUserArgs: ["data", "where"],
    UpdateOneUserArgs: ["data", "where"],
    UpsertOneUserArgs: ["where", "create", "update"],
    AggregateOrganizationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyOrganizationArgs: ["data", "skipDuplicates"],
    CreateOneOrganizationArgs: ["data"],
    DeleteManyOrganizationArgs: ["where"],
    DeleteOneOrganizationArgs: ["where"],
    FindFirstOrganizationArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindFirstOrganizationOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyOrganizationArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindUniqueOrganizationArgs: ["where"],
    FindUniqueOrganizationOrThrowArgs: ["where"],
    GroupByOrganizationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyOrganizationArgs: ["data", "where"],
    UpdateOneOrganizationArgs: ["data", "where"],
    UpsertOneOrganizationArgs: ["where", "create", "update"],
    AggregateUser_organizationArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
    ],
    CreateManyUser_organizationArgs: ["data", "skipDuplicates"],
    CreateOneUser_organizationArgs: ["data"],
    DeleteManyUser_organizationArgs: ["where"],
    DeleteOneUser_organizationArgs: ["where"],
    FindFirstUser_organizationArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindFirstUser_organizationOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyUser_organizationArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindUniqueUser_organizationArgs: ["where"],
    FindUniqueUser_organizationOrThrowArgs: ["where"],
    GroupByUser_organizationArgs: [
        "where",
        "orderBy",
        "by",
        "having",
        "take",
        "skip",
    ],
    UpdateManyUser_organizationArgs: ["data", "where"],
    UpdateOneUser_organizationArgs: ["data", "where"],
    UpsertOneUser_organizationArgs: ["where", "create", "update"],
    AggregateTeamArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTeamArgs: ["data", "skipDuplicates"],
    CreateOneTeamArgs: ["data"],
    DeleteManyTeamArgs: ["where"],
    DeleteOneTeamArgs: ["where"],
    FindFirstTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTeamOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTeamArgs: ["where"],
    FindUniqueTeamOrThrowArgs: ["where"],
    GroupByTeamArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTeamArgs: ["data", "where"],
    UpdateOneTeamArgs: ["data", "where"],
    UpsertOneTeamArgs: ["where", "create", "update"],
    AggregateUser_organization_teamArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
    ],
    CreateManyUser_organization_teamArgs: ["data", "skipDuplicates"],
    CreateOneUser_organization_teamArgs: ["data"],
    DeleteManyUser_organization_teamArgs: ["where"],
    DeleteOneUser_organization_teamArgs: ["where"],
    FindFirstUser_organization_teamArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindFirstUser_organization_teamOrThrowArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindManyUser_organization_teamArgs: [
        "where",
        "orderBy",
        "cursor",
        "take",
        "skip",
        "distinct",
    ],
    FindUniqueUser_organization_teamArgs: ["where"],
    FindUniqueUser_organization_teamOrThrowArgs: ["where"],
    GroupByUser_organization_teamArgs: [
        "where",
        "orderBy",
        "by",
        "having",
        "take",
        "skip",
    ],
    UpdateManyUser_organization_teamArgs: ["data", "where"],
    UpdateOneUser_organization_teamArgs: ["data", "where"],
    UpsertOneUser_organization_teamArgs: ["where", "create", "update"],
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    const mutationOperationPrefixes = [
        "createOne",
        "createMany",
        "deleteOne",
        "updateOne",
        "deleteMany",
        "updateMany",
        "upsertOne",
    ];
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        const allActionsDecorators = resolverActionsConfig._all;
        const resolverActionNames = crudResolversInfo[modelName];
        for (const resolverActionName of resolverActionNames) {
            const maybeDecoratorsOrFn = resolverActionsConfig[resolverActionName];
            const isWriteOperation = mutationOperationPrefixes.some((prefix) => resolverActionName.startsWith(prefix));
            const operationKindDecorators = isWriteOperation
                ? resolverActionsConfig._mutation
                : resolverActionsConfig._query;
            const mainDecorators = [
                ...(allActionsDecorators !== null && allActionsDecorators !== void 0 ? allActionsDecorators : []),
                ...(operationKindDecorators !== null && operationKindDecorators !== void 0 ? operationKindDecorators : []),
            ];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(mainDecorators);
            }
            else {
                decorators = [...mainDecorators, ...(maybeDecoratorsOrFn !== null && maybeDecoratorsOrFn !== void 0 ? maybeDecoratorsOrFn : [])];
            }
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Asset: relationResolvers.AssetRelationsResolver,
    Log: relationResolvers.LogRelationsResolver,
    Part: relationResolvers.PartRelationsResolver,
    Trace: relationResolvers.TraceRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Organization: relationResolvers.OrganizationRelationsResolver,
    User_organization: relationResolvers.User_organizationRelationsResolver,
    Team: relationResolvers.TeamRelationsResolver,
    User_organization_team: relationResolvers.User_organization_teamRelationsResolver,
};
const relationResolversInfo = {
    Asset: ["trace"],
    Log: ["trace"],
    Part: ["trace"],
    Trace: ["images", "logs", "parts", "user_organization"],
    User: ["user_organizations"],
    Organization: ["user_organizations", "teams"],
    User_organization: [
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    Team: ["organization", "user_organization_teams"],
    User_organization_team: ["team", "user_organization"],
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    var _a;
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        const allActionsDecorators = (_a = relationResolverActionsConfig._all) !== null && _a !== void 0 ? _a : [];
        const relationResolverActionNames = relationResolversInfo[modelName];
        for (const relationResolverActionName of relationResolverActionNames) {
            const maybeDecoratorsOrFn = relationResolverActionsConfig[relationResolverActionName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allActionsDecorators);
            }
            else {
                decorators = [...allActionsDecorators, ...(maybeDecoratorsOrFn !== null && maybeDecoratorsOrFn !== void 0 ? maybeDecoratorsOrFn : [])];
            }
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    var _a;
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        const allFieldsDecorators = (_a = enhanceConfig.fields._all) !== null && _a !== void 0 ? _a : [];
        for (const typeFieldName of typeFieldNames) {
            const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allFieldsDecorators);
            }
            else {
                decorators = [...allFieldsDecorators, ...(maybeDecoratorsOrFn !== null && maybeDecoratorsOrFn !== void 0 ? maybeDecoratorsOrFn : [])];
            }
            tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Asset: ["id", "url", "date", "trace_id"],
    Log: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    Part: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    Trace: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    User: ["id", "created_at", "updated_at", "username", "name", "status"],
    Organization: ["id", "slug", "name"],
    User_organization: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    Team: ["id", "name", "organization_id"],
    User_organization_team: ["id", "team_id", "user_organization_id", "role"],
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateAsset: ["_count", "_avg", "_sum", "_min", "_max"],
    AssetGroupBy: [
        "id",
        "url",
        "date",
        "trace_id",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateLog: ["_count", "_avg", "_sum", "_min", "_max"],
    LogGroupBy: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregatePart: ["_count", "_avg", "_sum", "_min", "_max"],
    PartGroupBy: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateTrace: ["_count", "_avg", "_sum", "_min", "_max"],
    TraceGroupBy: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
    UserGroupBy: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateOrganization: ["_count", "_avg", "_sum", "_min", "_max"],
    OrganizationGroupBy: [
        "id",
        "slug",
        "name",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateUser_organization: ["_count", "_avg", "_sum", "_min", "_max"],
    User_organizationGroupBy: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateTeam: ["_count", "_avg", "_sum", "_min", "_max"],
    TeamGroupBy: [
        "id",
        "name",
        "organization_id",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AggregateUser_organization_team: ["_count", "_avg", "_sum", "_min", "_max"],
    User_organization_teamGroupBy: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AffectedRowsOutput: ["count"],
    AssetCountAggregate: ["id", "url", "date", "trace_id", "_all"],
    AssetAvgAggregate: ["id", "trace_id"],
    AssetSumAggregate: ["id", "trace_id"],
    AssetMinAggregate: ["id", "url", "date", "trace_id"],
    AssetMaxAggregate: ["id", "url", "date", "trace_id"],
    LogCountAggregate: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "_all",
    ],
    LogAvgAggregate: ["id", "trace_id"],
    LogSumAggregate: ["id", "trace_id"],
    LogMinAggregate: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    LogMaxAggregate: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    PartCountAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "_all",
    ],
    PartAvgAggregate: ["id", "active_time", "in_active_time", "trace_id"],
    PartSumAggregate: ["id", "active_time", "in_active_time", "trace_id"],
    PartMinAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartMaxAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    TraceCount: ["images", "logs", "parts"],
    TraceCountAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "_all",
    ],
    TraceAvgAggregate: [
        "id",
        "active_time",
        "in_active_time",
        "all_time",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceSumAggregate: [
        "id",
        "active_time",
        "in_active_time",
        "all_time",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceMinAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceMaxAggregate: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    UserCount: ["user_organizations"],
    UserCountAggregate: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "_all",
    ],
    UserAvgAggregate: ["id"],
    UserSumAggregate: ["id"],
    UserMinAggregate: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserMaxAggregate: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    OrganizationCount: ["user_organizations", "teams"],
    OrganizationCountAggregate: ["id", "slug", "name", "_all"],
    OrganizationAvgAggregate: ["id"],
    OrganizationSumAggregate: ["id"],
    OrganizationMinAggregate: ["id", "slug", "name"],
    OrganizationMaxAggregate: ["id", "slug", "name"],
    User_organizationCount: ["traces", "user_organization_teams"],
    User_organizationCountAggregate: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "_all",
    ],
    User_organizationAvgAggregate: ["id", "user_id", "organization_id"],
    User_organizationSumAggregate: ["id", "user_id", "organization_id"],
    User_organizationMinAggregate: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationMaxAggregate: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    TeamCount: ["user_organization_teams"],
    TeamCountAggregate: ["id", "name", "organization_id", "_all"],
    TeamAvgAggregate: ["id", "organization_id"],
    TeamSumAggregate: ["id", "organization_id"],
    TeamMinAggregate: ["id", "name", "organization_id"],
    TeamMaxAggregate: ["id", "name", "organization_id"],
    User_organization_teamCountAggregate: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
        "_all",
    ],
    User_organization_teamAvgAggregate: ["id", "team_id", "user_organization_id"],
    User_organization_teamSumAggregate: ["id", "team_id", "user_organization_id"],
    User_organization_teamMinAggregate: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamMaxAggregate: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    AssetWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "url",
        "date",
        "trace_id",
        "trace",
    ],
    AssetOrderByWithRelationInput: ["id", "url", "date", "trace_id", "trace"],
    AssetWhereUniqueInput: [
        "id",
        "AND",
        "OR",
        "NOT",
        "url",
        "date",
        "trace_id",
        "trace",
    ],
    AssetOrderByWithAggregationInput: [
        "id",
        "url",
        "date",
        "trace_id",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    AssetScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "url",
        "date",
        "trace_id",
    ],
    LogWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "trace",
    ],
    LogOrderByWithRelationInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "trace",
    ],
    LogWhereUniqueInput: [
        "id",
        "AND",
        "OR",
        "NOT",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "trace",
    ],
    LogOrderByWithAggregationInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    LogScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    PartWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "trace",
    ],
    PartOrderByWithRelationInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "trace",
    ],
    PartWhereUniqueInput: [
        "id",
        "AND",
        "OR",
        "NOT",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "trace",
    ],
    PartOrderByWithAggregationInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    PartScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    TraceWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "images",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceOrderByWithRelationInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "images",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceWhereUniqueInput: [
        "id",
        "user_organization_id_date",
        "id_user_organization_id_date",
        "AND",
        "OR",
        "NOT",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "images",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceOrderByWithAggregationInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    TraceScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    UserWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "user_organizations",
    ],
    UserOrderByWithRelationInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "user_organizations",
    ],
    UserWhereUniqueInput: [
        "id",
        "username",
        "AND",
        "OR",
        "NOT",
        "created_at",
        "updated_at",
        "name",
        "password",
        "status",
        "user_organizations",
    ],
    UserOrderByWithAggregationInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    UserScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    OrganizationWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "slug",
        "name",
        "user_organizations",
        "teams",
    ],
    OrganizationOrderByWithRelationInput: [
        "id",
        "slug",
        "name",
        "user_organizations",
        "teams",
    ],
    OrganizationWhereUniqueInput: [
        "id",
        "slug",
        "id_slug",
        "AND",
        "OR",
        "NOT",
        "name",
        "user_organizations",
        "teams",
    ],
    OrganizationOrderByWithAggregationInput: [
        "id",
        "slug",
        "name",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    OrganizationScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "slug",
        "name",
    ],
    User_organizationWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationOrderByWithRelationInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationWhereUniqueInput: [
        "id",
        "user_id_organization_id",
        "user_id_slug",
        "user_id_organization_id_role",
        "id_user_id_organization_id",
        "AND",
        "OR",
        "NOT",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationOrderByWithAggregationInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    User_organizationScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    TeamWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "name",
        "organization_id",
        "organization",
        "user_organization_teams",
    ],
    TeamOrderByWithRelationInput: [
        "id",
        "name",
        "organization_id",
        "organization",
        "user_organization_teams",
    ],
    TeamWhereUniqueInput: [
        "id",
        "name_organization_id",
        "AND",
        "OR",
        "NOT",
        "name",
        "organization_id",
        "organization",
        "user_organization_teams",
    ],
    TeamOrderByWithAggregationInput: [
        "id",
        "name",
        "organization_id",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    TeamScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "name",
        "organization_id",
    ],
    User_organization_teamWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "team_id",
        "user_organization_id",
        "role",
        "team",
        "user_organization",
    ],
    User_organization_teamOrderByWithRelationInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
        "team",
        "user_organization",
    ],
    User_organization_teamWhereUniqueInput: [
        "id",
        "team_id_user_organization_id",
        "team_id_user_organization_id_role",
        "AND",
        "OR",
        "NOT",
        "team_id",
        "user_organization_id",
        "role",
        "team",
        "user_organization",
    ],
    User_organization_teamOrderByWithAggregationInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
        "_count",
        "_avg",
        "_max",
        "_min",
        "_sum",
    ],
    User_organization_teamScalarWhereWithAggregatesInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    AssetCreateInput: ["url", "date", "trace"],
    AssetUpdateInput: ["url", "date", "trace"],
    AssetCreateManyInput: ["id", "url", "date", "trace_id"],
    AssetUpdateManyMutationInput: ["url", "date"],
    LogCreateInput: [
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace",
    ],
    LogUpdateInput: [
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace",
    ],
    LogCreateManyInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    LogUpdateManyMutationInput: [
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
    ],
    PartCreateInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace",
    ],
    PartUpdateInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace",
    ],
    PartCreateManyInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartUpdateManyMutationInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
    ],
    TraceCreateInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceUpdateInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceCreateManyInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceUpdateManyMutationInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
    ],
    UserCreateInput: [
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "user_organizations",
    ],
    UserUpdateInput: [
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
        "user_organizations",
    ],
    UserCreateManyInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserUpdateManyMutationInput: [
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    OrganizationCreateInput: ["slug", "name", "user_organizations", "teams"],
    OrganizationUpdateInput: ["slug", "name", "user_organizations", "teams"],
    OrganizationCreateManyInput: ["id", "slug", "name"],
    OrganizationUpdateManyMutationInput: ["slug", "name"],
    User_organizationCreateInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationUpdateInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationCreateManyInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationUpdateManyMutationInput: [
        "role",
        "invitation_status",
        "last_invited",
    ],
    TeamCreateInput: ["name", "organization", "user_organization_teams"],
    TeamUpdateInput: ["name", "organization", "user_organization_teams"],
    TeamCreateManyInput: ["id", "name", "organization_id"],
    TeamUpdateManyMutationInput: ["name"],
    User_organization_teamCreateInput: ["role", "team", "user_organization"],
    User_organization_teamUpdateInput: ["role", "team", "user_organization"],
    User_organization_teamCreateManyInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamUpdateManyMutationInput: ["role"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
    ],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    TraceRelationFilter: ["is", "isNot"],
    SortOrderInput: ["sort", "nulls"],
    AssetCountOrderByAggregateInput: ["id", "url", "date", "trace_id"],
    AssetAvgOrderByAggregateInput: ["id", "trace_id"],
    AssetMaxOrderByAggregateInput: ["id", "url", "date", "trace_id"],
    AssetMinOrderByAggregateInput: ["id", "url", "date", "trace_id"],
    AssetSumOrderByAggregateInput: ["id", "trace_id"],
    IntWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    StringNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    DateTimeWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    BoolFilter: ["equals", "not"],
    StringFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
    ],
    LogCountOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    LogAvgOrderByAggregateInput: ["id", "trace_id"],
    LogMaxOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    LogMinOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    LogSumOrderByAggregateInput: ["id", "trace_id"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    StringWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    DecimalFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    PartCountOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartAvgOrderByAggregateInput: [
        "id",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartMaxOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartMinOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    PartSumOrderByAggregateInput: [
        "id",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    DecimalWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    AssetListRelationFilter: ["every", "some", "none"],
    LogListRelationFilter: ["every", "some", "none"],
    PartListRelationFilter: ["every", "some", "none"],
    User_organizationNullableRelationFilter: ["is", "isNot"],
    AssetOrderByRelationAggregateInput: ["_count"],
    LogOrderByRelationAggregateInput: ["_count"],
    PartOrderByRelationAggregateInput: ["_count"],
    traceUser_organization_idDateCompoundUniqueInput: [
        "user_organization_id",
        "date",
    ],
    traceIdUser_organization_idDateCompoundUniqueInput: [
        "id",
        "user_organization_id",
        "date",
    ],
    TraceCountOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceAvgOrderByAggregateInput: [
        "id",
        "active_time",
        "in_active_time",
        "all_time",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceMaxOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceMinOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    TraceSumOrderByAggregateInput: [
        "id",
        "active_time",
        "in_active_time",
        "all_time",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    Enumaccount_statusFilter: ["equals", "in", "notIn", "not"],
    User_organizationListRelationFilter: ["every", "some", "none"],
    User_organizationOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserAvgOrderByAggregateInput: ["id"],
    UserMaxOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserMinOrderByAggregateInput: [
        "id",
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserSumOrderByAggregateInput: ["id"],
    Enumaccount_statusWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    TeamListRelationFilter: ["every", "some", "none"],
    TeamOrderByRelationAggregateInput: ["_count"],
    organizationIdSlugCompoundUniqueInput: ["id", "slug"],
    OrganizationCountOrderByAggregateInput: ["id", "slug", "name"],
    OrganizationAvgOrderByAggregateInput: ["id"],
    OrganizationMaxOrderByAggregateInput: ["id", "slug", "name"],
    OrganizationMinOrderByAggregateInput: ["id", "slug", "name"],
    OrganizationSumOrderByAggregateInput: ["id"],
    Enumuser_roleFilter: ["equals", "in", "notIn", "not"],
    Enumuser_invitation_statusNullableFilter: ["equals", "in", "notIn", "not"],
    DateTimeNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    UserNullableRelationFilter: ["is", "isNot"],
    TraceListRelationFilter: ["every", "some", "none"],
    OrganizationNullableRelationFilter: ["is", "isNot"],
    User_organization_teamListRelationFilter: ["every", "some", "none"],
    TraceOrderByRelationAggregateInput: ["_count"],
    User_organization_teamOrderByRelationAggregateInput: ["_count"],
    user_organizationUser_idOrganization_idCompoundUniqueInput: [
        "user_id",
        "organization_id",
    ],
    user_organizationUser_idSlugCompoundUniqueInput: ["user_id", "slug"],
    user_organizationUser_idOrganization_idRoleCompoundUniqueInput: [
        "user_id",
        "organization_id",
        "role",
    ],
    user_organizationIdUser_idOrganization_idCompoundUniqueInput: [
        "id",
        "user_id",
        "organization_id",
    ],
    User_organizationCountOrderByAggregateInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationAvgOrderByAggregateInput: [
        "id",
        "user_id",
        "organization_id",
    ],
    User_organizationMaxOrderByAggregateInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationMinOrderByAggregateInput: [
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationSumOrderByAggregateInput: [
        "id",
        "user_id",
        "organization_id",
    ],
    Enumuser_roleWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    Enumuser_invitation_statusNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    DateTimeNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    teamNameOrganization_idCompoundUniqueInput: ["name", "organization_id"],
    TeamCountOrderByAggregateInput: ["id", "name", "organization_id"],
    TeamAvgOrderByAggregateInput: ["id", "organization_id"],
    TeamMaxOrderByAggregateInput: ["id", "name", "organization_id"],
    TeamMinOrderByAggregateInput: ["id", "name", "organization_id"],
    TeamSumOrderByAggregateInput: ["id", "organization_id"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    Enumteam_roleFilter: ["equals", "in", "notIn", "not"],
    TeamNullableRelationFilter: ["is", "isNot"],
    user_organization_teamTeam_idUser_organization_idCompoundUniqueInput: [
        "team_id",
        "user_organization_id",
    ],
    user_organization_teamTeam_idUser_organization_idRoleCompoundUniqueInput: [
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamCountOrderByAggregateInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamAvgOrderByAggregateInput: [
        "id",
        "team_id",
        "user_organization_id",
    ],
    User_organization_teamMaxOrderByAggregateInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamMinOrderByAggregateInput: [
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamSumOrderByAggregateInput: [
        "id",
        "team_id",
        "user_organization_id",
    ],
    IntNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    Enumteam_roleWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    TraceCreateNestedOneWithoutImagesInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    NullableStringFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    TraceUpdateOneRequiredWithoutImagesNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "connect",
        "update",
    ],
    IntFieldUpdateOperationsInput: [
        "set",
        "increment",
        "decrement",
        "multiply",
        "divide",
    ],
    TraceCreateNestedOneWithoutLogsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    BoolFieldUpdateOperationsInput: ["set"],
    StringFieldUpdateOperationsInput: ["set"],
    TraceUpdateOneRequiredWithoutLogsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "connect",
        "update",
    ],
    TraceCreateNestedOneWithoutPartsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    DecimalFieldUpdateOperationsInput: [
        "set",
        "increment",
        "decrement",
        "multiply",
        "divide",
    ],
    TraceUpdateOneRequiredWithoutPartsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "connect",
        "update",
    ],
    AssetCreateNestedManyWithoutTraceInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    LogCreateNestedManyWithoutTraceInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    PartCreateNestedManyWithoutTraceInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    User_organizationCreateNestedOneWithoutTracesInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    AssetUpdateManyWithoutTraceNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    LogUpdateManyWithoutTraceNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    PartUpdateManyWithoutTraceNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    User_organizationUpdateOneWithoutTracesNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    User_organizationCreateNestedManyWithoutUserInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    Enumaccount_statusFieldUpdateOperationsInput: ["set"],
    User_organizationUpdateManyWithoutUserNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    User_organizationCreateNestedManyWithoutOrganizationInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    TeamCreateNestedManyWithoutOrganizationInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    User_organizationUpdateManyWithoutOrganizationNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    TeamUpdateManyWithoutOrganizationNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    UserCreateNestedOneWithoutUser_organizationsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    TraceCreateNestedManyWithoutUser_organizationInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    OrganizationCreateNestedOneWithoutUser_organizationsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    User_organization_teamCreateNestedManyWithoutUser_organizationInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    Enumuser_roleFieldUpdateOperationsInput: ["set"],
    NullableEnumuser_invitation_statusFieldUpdateOperationsInput: ["set"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutUser_organizationsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    TraceUpdateManyWithoutUser_organizationNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    OrganizationUpdateOneWithoutUser_organizationsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    User_organization_teamUpdateManyWithoutUser_organizationNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    OrganizationCreateNestedOneWithoutTeamsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    User_organization_teamCreateNestedManyWithoutTeamInput: [
        "create",
        "connectOrCreate",
        "createMany",
        "connect",
    ],
    OrganizationUpdateOneWithoutTeamsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    User_organization_teamUpdateManyWithoutTeamNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "createMany",
        "set",
        "disconnect",
        "delete",
        "connect",
        "update",
        "updateMany",
        "deleteMany",
    ],
    TeamCreateNestedOneWithoutUser_organization_teamsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    User_organizationCreateNestedOneWithoutUser_organization_teamsInput: [
        "create",
        "connectOrCreate",
        "connect",
    ],
    Enumteam_roleFieldUpdateOperationsInput: ["set"],
    TeamUpdateOneWithoutUser_organization_teamsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    User_organizationUpdateOneWithoutUser_organization_teamsNestedInput: [
        "create",
        "connectOrCreate",
        "upsert",
        "disconnect",
        "delete",
        "connect",
        "update",
    ],
    NullableIntFieldUpdateOperationsInput: [
        "set",
        "increment",
        "decrement",
        "multiply",
        "divide",
    ],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
    ],
    NestedDateTimeFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    NestedIntWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedIntNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    NestedDateTimeWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedBoolFilter: ["equals", "not"],
    NestedStringFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
    ],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedStringWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "contains",
        "startsWith",
        "endsWith",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedDecimalFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    NestedDecimalWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    NestedEnumaccount_statusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumaccount_statusWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedEnumuser_roleFilter: ["equals", "in", "notIn", "not"],
    NestedEnumuser_invitation_statusNullableFilter: [
        "equals",
        "in",
        "notIn",
        "not",
    ],
    NestedDateTimeNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    NestedEnumuser_roleWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedEnumuser_invitation_statusNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedDateTimeNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    NestedEnumteam_roleFilter: ["equals", "in", "notIn", "not"],
    NestedIntNullableWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
        "_count",
        "_avg",
        "_sum",
        "_min",
        "_max",
    ],
    NestedFloatNullableFilter: [
        "equals",
        "in",
        "notIn",
        "lt",
        "lte",
        "gt",
        "gte",
        "not",
    ],
    NestedEnumteam_roleWithAggregatesFilter: [
        "equals",
        "in",
        "notIn",
        "not",
        "_count",
        "_min",
        "_max",
    ],
    TraceCreateWithoutImagesInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceCreateOrConnectWithoutImagesInput: ["where", "create"],
    TraceUpsertWithoutImagesInput: ["update", "create", "where"],
    TraceUpdateToOneWithWhereWithoutImagesInput: ["where", "data"],
    TraceUpdateWithoutImagesInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "logs",
        "parts",
        "user_organization",
    ],
    TraceCreateWithoutLogsInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "parts",
        "user_organization",
    ],
    TraceCreateOrConnectWithoutLogsInput: ["where", "create"],
    TraceUpsertWithoutLogsInput: ["update", "create", "where"],
    TraceUpdateToOneWithWhereWithoutLogsInput: ["where", "data"],
    TraceUpdateWithoutLogsInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "parts",
        "user_organization",
    ],
    TraceCreateWithoutPartsInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "user_organization",
    ],
    TraceCreateOrConnectWithoutPartsInput: ["where", "create"],
    TraceUpsertWithoutPartsInput: ["update", "create", "where"],
    TraceUpdateToOneWithWhereWithoutPartsInput: ["where", "data"],
    TraceUpdateWithoutPartsInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "user_organization",
    ],
    AssetCreateWithoutTraceInput: ["url", "date"],
    AssetCreateOrConnectWithoutTraceInput: ["where", "create"],
    AssetCreateManyTraceInputEnvelope: ["data", "skipDuplicates"],
    LogCreateWithoutTraceInput: [
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
    ],
    LogCreateOrConnectWithoutTraceInput: ["where", "create"],
    LogCreateManyTraceInputEnvelope: ["data", "skipDuplicates"],
    PartCreateWithoutTraceInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
    ],
    PartCreateOrConnectWithoutTraceInput: ["where", "create"],
    PartCreateManyTraceInputEnvelope: ["data", "skipDuplicates"],
    User_organizationCreateWithoutTracesInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "organization",
        "user_organization_teams",
    ],
    User_organizationCreateOrConnectWithoutTracesInput: ["where", "create"],
    AssetUpsertWithWhereUniqueWithoutTraceInput: ["where", "update", "create"],
    AssetUpdateWithWhereUniqueWithoutTraceInput: ["where", "data"],
    AssetUpdateManyWithWhereWithoutTraceInput: ["where", "data"],
    AssetScalarWhereInput: ["AND", "OR", "NOT", "id", "url", "date", "trace_id"],
    LogUpsertWithWhereUniqueWithoutTraceInput: ["where", "update", "create"],
    LogUpdateWithWhereUniqueWithoutTraceInput: ["where", "data"],
    LogUpdateManyWithWhereWithoutTraceInput: ["where", "data"],
    LogScalarWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
        "trace_id",
    ],
    PartUpsertWithWhereUniqueWithoutTraceInput: ["where", "update", "create"],
    PartUpdateWithWhereUniqueWithoutTraceInput: ["where", "data"],
    PartUpdateManyWithWhereWithoutTraceInput: ["where", "data"],
    PartScalarWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "trace_id",
    ],
    User_organizationUpsertWithoutTracesInput: ["update", "create", "where"],
    User_organizationUpdateToOneWithWhereWithoutTracesInput: ["where", "data"],
    User_organizationUpdateWithoutTracesInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "organization",
        "user_organization_teams",
    ],
    User_organizationCreateWithoutUserInput: [
        "role",
        "invitation_status",
        "last_invited",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationCreateOrConnectWithoutUserInput: ["where", "create"],
    User_organizationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    User_organizationUpsertWithWhereUniqueWithoutUserInput: [
        "where",
        "update",
        "create",
    ],
    User_organizationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    User_organizationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    User_organizationScalarWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "role",
        "user_id",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationCreateWithoutOrganizationInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "user_organization_teams",
    ],
    User_organizationCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    User_organizationCreateManyOrganizationInputEnvelope: [
        "data",
        "skipDuplicates",
    ],
    TeamCreateWithoutOrganizationInput: ["name", "user_organization_teams"],
    TeamCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    TeamCreateManyOrganizationInputEnvelope: ["data", "skipDuplicates"],
    User_organizationUpsertWithWhereUniqueWithoutOrganizationInput: [
        "where",
        "update",
        "create",
    ],
    User_organizationUpdateWithWhereUniqueWithoutOrganizationInput: [
        "where",
        "data",
    ],
    User_organizationUpdateManyWithWhereWithoutOrganizationInput: [
        "where",
        "data",
    ],
    TeamUpsertWithWhereUniqueWithoutOrganizationInput: [
        "where",
        "update",
        "create",
    ],
    TeamUpdateWithWhereUniqueWithoutOrganizationInput: ["where", "data"],
    TeamUpdateManyWithWhereWithoutOrganizationInput: ["where", "data"],
    TeamScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "organization_id"],
    UserCreateWithoutUser_organizationsInput: [
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    UserCreateOrConnectWithoutUser_organizationsInput: ["where", "create"],
    TraceCreateWithoutUser_organizationInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "parts",
    ],
    TraceCreateOrConnectWithoutUser_organizationInput: ["where", "create"],
    TraceCreateManyUser_organizationInputEnvelope: ["data", "skipDuplicates"],
    OrganizationCreateWithoutUser_organizationsInput: ["slug", "name", "teams"],
    OrganizationCreateOrConnectWithoutUser_organizationsInput: [
        "where",
        "create",
    ],
    User_organization_teamCreateWithoutUser_organizationInput: ["role", "team"],
    User_organization_teamCreateOrConnectWithoutUser_organizationInput: [
        "where",
        "create",
    ],
    User_organization_teamCreateManyUser_organizationInputEnvelope: [
        "data",
        "skipDuplicates",
    ],
    UserUpsertWithoutUser_organizationsInput: ["update", "create", "where"],
    UserUpdateToOneWithWhereWithoutUser_organizationsInput: ["where", "data"],
    UserUpdateWithoutUser_organizationsInput: [
        "created_at",
        "updated_at",
        "username",
        "name",
        "password",
        "status",
    ],
    TraceUpsertWithWhereUniqueWithoutUser_organizationInput: [
        "where",
        "update",
        "create",
    ],
    TraceUpdateWithWhereUniqueWithoutUser_organizationInput: ["where", "data"],
    TraceUpdateManyWithWhereWithoutUser_organizationInput: ["where", "data"],
    TraceScalarWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "user_id",
        "organization_id",
        "user_organization_id",
    ],
    OrganizationUpsertWithoutUser_organizationsInput: [
        "update",
        "create",
        "where",
    ],
    OrganizationUpdateToOneWithWhereWithoutUser_organizationsInput: [
        "where",
        "data",
    ],
    OrganizationUpdateWithoutUser_organizationsInput: ["slug", "name", "teams"],
    User_organization_teamUpsertWithWhereUniqueWithoutUser_organizationInput: [
        "where",
        "update",
        "create",
    ],
    User_organization_teamUpdateWithWhereUniqueWithoutUser_organizationInput: [
        "where",
        "data",
    ],
    User_organization_teamUpdateManyWithWhereWithoutUser_organizationInput: [
        "where",
        "data",
    ],
    User_organization_teamScalarWhereInput: [
        "AND",
        "OR",
        "NOT",
        "id",
        "team_id",
        "user_organization_id",
        "role",
    ],
    OrganizationCreateWithoutTeamsInput: ["slug", "name", "user_organizations"],
    OrganizationCreateOrConnectWithoutTeamsInput: ["where", "create"],
    User_organization_teamCreateWithoutTeamInput: ["role", "user_organization"],
    User_organization_teamCreateOrConnectWithoutTeamInput: ["where", "create"],
    User_organization_teamCreateManyTeamInputEnvelope: ["data", "skipDuplicates"],
    OrganizationUpsertWithoutTeamsInput: ["update", "create", "where"],
    OrganizationUpdateToOneWithWhereWithoutTeamsInput: ["where", "data"],
    OrganizationUpdateWithoutTeamsInput: ["slug", "name", "user_organizations"],
    User_organization_teamUpsertWithWhereUniqueWithoutTeamInput: [
        "where",
        "update",
        "create",
    ],
    User_organization_teamUpdateWithWhereUniqueWithoutTeamInput: [
        "where",
        "data",
    ],
    User_organization_teamUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
    TeamCreateWithoutUser_organization_teamsInput: ["name", "organization"],
    TeamCreateOrConnectWithoutUser_organization_teamsInput: ["where", "create"],
    User_organizationCreateWithoutUser_organization_teamsInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
    ],
    User_organizationCreateOrConnectWithoutUser_organization_teamsInput: [
        "where",
        "create",
    ],
    TeamUpsertWithoutUser_organization_teamsInput: ["update", "create", "where"],
    TeamUpdateToOneWithWhereWithoutUser_organization_teamsInput: [
        "where",
        "data",
    ],
    TeamUpdateWithoutUser_organization_teamsInput: ["name", "organization"],
    User_organizationUpsertWithoutUser_organization_teamsInput: [
        "update",
        "create",
        "where",
    ],
    User_organizationUpdateToOneWithWhereWithoutUser_organization_teamsInput: [
        "where",
        "data",
    ],
    User_organizationUpdateWithoutUser_organization_teamsInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "organization",
    ],
    AssetCreateManyTraceInput: ["id", "url", "date"],
    LogCreateManyTraceInput: [
        "id",
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
    ],
    PartCreateManyTraceInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
    ],
    AssetUpdateWithoutTraceInput: ["url", "date"],
    LogUpdateWithoutTraceInput: [
        "created_at",
        "updated_at",
        "start_time",
        "end_time",
        "is_active",
        "status",
    ],
    PartUpdateWithoutTraceInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
    ],
    User_organizationCreateManyUserInput: [
        "id",
        "role",
        "slug",
        "organization_id",
        "invitation_status",
        "last_invited",
    ],
    User_organizationUpdateWithoutUserInput: [
        "role",
        "invitation_status",
        "last_invited",
        "traces",
        "organization",
        "user_organization_teams",
    ],
    User_organizationCreateManyOrganizationInput: [
        "id",
        "role",
        "user_id",
        "invitation_status",
        "last_invited",
    ],
    TeamCreateManyOrganizationInput: ["id", "name"],
    User_organizationUpdateWithoutOrganizationInput: [
        "role",
        "invitation_status",
        "last_invited",
        "user",
        "traces",
        "user_organization_teams",
    ],
    TeamUpdateWithoutOrganizationInput: ["name", "user_organization_teams"],
    TraceCreateManyUser_organizationInput: [
        "id",
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
    ],
    User_organization_teamCreateManyUser_organizationInput: [
        "id",
        "team_id",
        "role",
    ],
    TraceUpdateWithoutUser_organizationInput: [
        "created_at",
        "updated_at",
        "active_time",
        "in_active_time",
        "all_time",
        "date",
        "images",
        "logs",
        "parts",
    ],
    User_organization_teamUpdateWithoutUser_organizationInput: ["role", "team"],
    User_organization_teamCreateManyTeamInput: [
        "id",
        "user_organization_id",
        "role",
    ],
    User_organization_teamUpdateWithoutTeamInput: ["role", "user_organization"],
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
//# sourceMappingURL=enhance.js.map